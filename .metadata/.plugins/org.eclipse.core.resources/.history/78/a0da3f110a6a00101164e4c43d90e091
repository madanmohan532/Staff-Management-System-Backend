package training.iqgateway.hospital.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Service;

import training.iqgateway.hospital.dto.NurseResponseDTO;
import training.iqgateway.hospital.entity.Hospital;
import training.iqgateway.hospital.entity.RequestDetails;
import training.iqgateway.hospital.repository.HospitalRepository;

@Service
public class HospitalServiceImpl implements HospitalService {

	
	@Autowired
	HospitalRepository hospitalRepository;
	
	@Autowired
	MongoTemplate mongoTemplate;
	
	@Override
	public Hospital getHospitalById(String id) {
		// Placeholder for actual hospital retrieval logic
		return hospitalRepository.findById(id)
				.orElseThrow(() -> new RuntimeException("Hospital not found with id: " + id));
	}
	
	
	public NurseResponseDTO getNurseByRequestDetails(RequestDetails requestDetails) {
		
		
		
		
		Criteria notOnLeave = new Criteria().norOperator(
		        Criteria.where("leave_details.from_date").lte(requestDetails.getDate())
		                .andOperator(
		                    Criteria.where("leave_details.to_date").gte(requestDetails.getDate())
		                )
		    );
		    // This means: No leave_details entry with from_date <= checkDate <= to_date

		    // Query to ensure work_schedule for checkDate does NOT overlap with [fromTime, toTime]
		    Criteria workScheduleDate = Criteria.where("work_schedule.date").is(requestDetails.getDate());

		    // Overlap condition:
		    // Overlap if NOT (schedule.to <= fromTime OR schedule.from >= toTime)
		    // So, to find schedules that overlap:
		    Criteria overlapSchedule = new Criteria().andOperator(
		            Criteria.where("work_schedule.to").gt(requestDetails.getFrom()),
		            Criteria.where("work_schedule.from").lt(requestDetails.getTo()),
		            Criteria.where("work_schedule.date").is(requestDetails.getDate())
		    );

		    // We want nurses with NO overlapping work_schedule on checkDate,
		    // so exclude those with overlapping schedule:
		    Criteria noOverlapCondition = new Criteria().not().elemMatch(overlapSchedule);

		    // Combine criteria:
		    Query query = new Query(new Criteria().andOperator(
		            notOnLeave,
		            noOverlapCondition
		    ));
		
		    
	
	        
	        // Criteria to exclude nurses on leave
	        
	            
		
//		query.addCriteria(Criteria.where("available_status").is(true)
//	            .and("current_working_status").is(true)
//	            .and("registration_status").is("approved");
		
		return null;
	}
	

}
