package training.iqgateway.admin.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import training.iqgateway.admin.entity.Admin;
import training.iqgateway.admin.entity.User;
import training.iqgateway.admin.service.AdminService;
import training.iqgateway.admin.service.UserService;

@RestController
@CrossOrigin(origins = "http://localhost:5173") // Adjust the origin as needed
@RequestMapping("/api/admin/admin")
public class AdminController {
	
	@Autowired
	AdminService adminService;
	
	@Autowired
	UserService userService;
	
	@GetMapping("{id}")
	public ResponseEntity<?> getAdminById(@PathVariable String id) {
		// Logic to fetch admin by ID
	 // Placeholder for actual admin retrieval logic
		Admin foundAdmin = adminService.getAdminById(id);
		if(foundAdmin!=null) {
			return new ResponseEntity<>(foundAdmin, HttpStatus.OK);
		}
		return new ResponseEntity<>("Admin not found", HttpStatus.NOT_FOUND);
	}
	
	@PutMapping
	public ResponseEntity<?> updateAdminDetails(@RequestBody Admin admin) {
		if(admin == null || admin.getId() == null) {
			return new ResponseEntity<>("Invalid admin data provided.", HttpStatus.BAD_REQUEST);
		}
		
		// Logic to update admin details
		Admin updatedAdmin = adminService.updateAdmin(admin);
		if(updatedAdmin != null) {
			return new ResponseEntity<>(updatedAdmin, HttpStatus.OK);
		}
		
		return new ResponseEntity<>("Failed to update admin details", HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	
	@GetMapping("/users")
	public ResponseEntity<?> getAllUsers() {
		// Logic to fetch all users
		// Placeholder for actual user retrieval logic
		List<User> allUsers = userService.getAllUsers();
		if(allUsers == null || allUsers.isEmpty()) {
			return new ResponseEntity<>("No users found", HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<>(allUsers, HttpStatus.OK);
	}
	
	@DeleteMapping("/users/{id}")
	public ResponseEntity<?> deleteUserById(@PathVariable String id) {
		// Logic to delete user by ID
		if(id == null || id.isEmpty()) {
			return new ResponseEntity<>("Invalid user ID provided.", HttpStatus.BAD_REQUEST);
		}
		
		boolean isDeleted = userService.deleteUserById(id);
		if(isDeleted) {
			return new ResponseEntity<>("User deleted successfully", HttpStatus.OK);
		}
		
		return new ResponseEntity<>("User not found or could not be deleted", HttpStatus.NOT_FOUND);
	}
	
	@GetMapping("user/{email}")
	public ResponseEntity<?> getUserByEmail(@PathVariable String email) {
		// Logic to fetch user by email
		if(email == null || email.isEmpty()) {
			return new ResponseEntity<>("Invalid email provided.", HttpStatus.BAD_REQUEST);
		}
		
		User user = userService.findByEmail(email);
		if(user != null) {
			return new ResponseEntity<>(user, HttpStatus.OK);
		}
		
		return new ResponseEntity<>("User not found", HttpStatus.NOT_FOUND);
	}

}
