package training.iqgateway.admin.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import training.iqgateway.admin.dto.HospitalRequestDTO;
import training.iqgateway.admin.dto.HospitalResponseDTO;
import training.iqgateway.admin.entity.Hospital;
import training.iqgateway.admin.entity.User;
import training.iqgateway.admin.service.AdminService;
import training.iqgateway.admin.service.HospitalService;
import training.iqgateway.admin.service.UserService;
import training.iqgateway.admin.utils.HospitalUtils;
import training.iqgateway.admin.utils.UserUtils;
@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/api/admin/hospital")
public class HospitalController {
	
	@Autowired
	HospitalService hospitalService;
	
	@Autowired
	UserService userService;
	
	@Autowired
	AdminService adminService;
	
	@GetMapping("/hospitalDetails")
	public List<HospitalResponseDTO> getAllHospitals() {
		// Logic to fetch all hospitals
		List<HospitalResponseDTO> allHospitalResponseDTO = new ArrayList<>();

	    List<Hospital> listOfHospitalEntity = hospitalService.getAllHospitals();

	    for (Hospital hospital : listOfHospitalEntity) {
	        
	    	System.out.println(hospital);

	        allHospitalResponseDTO.add(HospitalUtils.convertToHospitalResponseDTO(hospital));
	    }

	    return allHospitalResponseDTO;
	}
	
	
	@PutMapping("/updateRegistrationStatus/{adminId}")
	public ResponseEntity<?> updateRegistrationStatus(@RequestBody HospitalRequestDTO hospitalRequestDTO, @PathVariable String adminId) {
		if(hospitalRequestDTO == null || hospitalRequestDTO.getRegistrationStatus() == null || hospitalRequestDTO.get_id() == null) {
			return new ResponseEntity<>("Invalid hospital data provided.", HttpStatus.BAD_REQUEST);
		}
		
		String userId = null;
		
		if(hospitalRequestDTO.getRegistrationStatus().equals("approved")) {
			userId = UserUtils.generateUserId();
		}
		 // Create a new user for the hospital
	
		Hospital updateHospitalRegistrationStatus = hospitalService.updateHospitalRegistrationStatus(hospitalRequestDTO.getRegistrationStatus(),hospitalRequestDTO.get_id(),userId);
		if(updateHospitalRegistrationStatus == null) {
			return new ResponseEntity<>("Hospital with ID: " + hospitalRequestDTO.get_id() + " not found.", HttpStatus.NOT_FOUND);
		}
		HospitalResponseDTO updatedHospital = HospitalUtils.convertToHospitalResponseDTO(updateHospitalRegistrationStatus); 
		if(updatedHospital!=null && hospitalRequestDTO.getRegistrationStatus().equals("approved")) {
			User newUser = UserUtils.convertToUser(hospitalRequestDTO);
			newUser.set_id(userId);
			
			User user = userService.createUser(newUser);
			
			
			
			adminService.updateAdmin(adminId,user.get_id());
			
			return new ResponseEntity<>(user, HttpStatus.OK);
		}
		return new ResponseEntity<>("Can not upadte Hospital Details", HttpStatus.FORBIDDEN);
	}
	
	
	@DeleteMapping("/deleteHospital")
	public ResponseEntity<?> deleteHospital(@RequestParam String hospitalId) {
		// Logic to delete a hospital
		if(hospitalService.deleteHospital(hospitalId)) {
			return new ResponseEntity<>("Hospital with ID: " + hospitalId + " has been deleted successfully.", HttpStatus.OK);
			
		}
		return new ResponseEntity<>("Hospital with ID: " + hospitalId + " could not be deleted.", HttpStatus.NOT_FOUND);
	}
	
	

	@PutMapping("/updateHospital")
	public ResponseEntity<?> updateHospital(@RequestBody Hospital hospital) {
		
		if (hospital != null) {
			Hospital updateHospital = hospitalService.updateHospital(hospital);
			return new ResponseEntity<>(updateHospital, HttpStatus.OK);
		}
		return new ResponseEntity<>("Hospital with ID: " + hospital.get_id() + " could not be updated.", HttpStatus.NOT_FOUND);
	}
	

}
