package training.iqgateway.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import training.iqgateway.entity.Admin;
import training.iqgateway.entity.HospitalRegistrationEntity;
import training.iqgateway.entity.NurseRegistrationEntity;
import training.iqgateway.entity.Users;
import training.iqgateway.service.HospitalRegistrationService;
import training.iqgateway.service.NurseRegistrationService;
import training.iqgateway.service.UserService;

@RestController
@RequestMapping("api/login")
public class LoginController {

	@Autowired
	HospitalRegistrationService hospitalRegistrationService;

	@Autowired
	NurseRegistrationService nurseRegistrationService;

	@Autowired
	UserService userService;

//	@PostMapping
//	public ResponseEntity<?> handleLogin(@RequestParam String email, @RequestParam String password,
//			@RequestParam String role) {
//		Users logUser = null;
//		if (role.equalsIgnoreCase("hospital staff")) {
//			Optional<HospitalRegistrationEntity> hospitalEntity = hospitalRegistrationService.findAllHospitals()
//					.stream().filter(hos -> hos.getContactDetails().getEmail().equals(email)).findFirst();
//
////			.findFirst().filter(h-> h.getRegistrationStatus().equals("approved"));
//
//			if (hospitalEntity.get() != null) {
//
//				if (hospitalEntity.get().getRegistrationStatus().equals("cancelled")) {
//					return new ResponseEntity<>("Registration is Cancelled by Admin", HttpStatus.FOUND);
//				} else if (hospitalEntity.get().getRegistrationStatus().equals("pending")) {
//					return new ResponseEntity<>("User is Not Validated, Come back Later", HttpStatus.FORBIDDEN);
//				}
//				
//				try {
//					logUser = userService.findByEmail(email);
//				} catch (NullPointerException e) {
//					// TODO: handle exception
//					return new ResponseEntity<>("User does not exist", HttpStatus.NOT_FOUND);
//				}
//				if (logUser.getPassword().equals(password)) {
//					return new ResponseEntity<>(logUser, HttpStatus.OK);
//				} else {
//					return new ResponseEntity<>("Incorrect Password, Try Again", HttpStatus.UNAUTHORIZED);
//				}
//				
//
//			} else {
//				return new ResponseEntity<>("Email Does not Exist, Try Again", HttpStatus.BAD_REQUEST);
//			}
//
//		} else if (role.equalsIgnoreCase("nurse")) {
//			Optional<NurseRegistrationEntity> nurseEntity = nurseRegistrationService.findAllNurses().stream()
//					.filter(nur -> nur.getContactDetails().getEmail().equals(email)).findFirst();
//			if (nurseEntity.get() != null) {
//
//				if (nurseEntity.get().getRegistrationStatus().equals("cancelled")) {
//					return new ResponseEntity<>("Registration is Cancelled by Admin", HttpStatus.FOUND);
//				} else if (nurseEntity.get().getRegistrationStatus().equals("pending")) {
//					return new ResponseEntity<>("User is Not Validated, Come back Later", HttpStatus.FORBIDDEN);
//				}
//				
//
//				try {
//					logUser = userService.findByEmail(email);
//				} catch (NullPointerException e) {
//					// TODO: handle exception
//					return new ResponseEntity<>("User does not exist", HttpStatus.NOT_FOUND);
//				}
//				if (logUser.getPassword().equals(password)) {
//					return new ResponseEntity<>(logUser, HttpStatus.OK);
//				} else {
//					return new ResponseEntity<>("Incorrect Password, Try Again", HttpStatus.UNAUTHORIZED);
//				}
//
//			} else {
//				return new ResponseEntity<>("Email Does not Exist, Try Again", HttpStatus.BAD_REQUEST);
//			}
//		}
//
//		
//		return new ResponseEntity<>("last return statemtn", HttpStatus.BAD_GATEWAY);
//
//		
//
//	}
	
	@GetMapping("/users")
	public List<Users> getUsers() {
		return userService.findAll();
	}
	
	
	@PostMapping("/login")
	public ResponseEntity<?> handleLogin(@RequestParam String email,
	                                     @RequestParam String password,
	                                     @RequestParam String role) {

	    Users logUser;

	    if ("hospital staff".equalsIgnoreCase(role)) {
	        Optional<HospitalRegistrationEntity> hospitalEntityOpt = hospitalRegistrationService.findAllHospitals()
	            .stream()
	            .filter(hos -> hos.getContactDetails().getEmail().equals(email))
	            .findFirst();

	        if (!hospitalEntityOpt.isPresent()) {
	            return new ResponseEntity<>("Email Does not Exist, Try Again", HttpStatus.BAD_REQUEST);
	        }

	        String status = hospitalEntityOpt.get().getRegistrationStatus();
	        System.out.println(hospitalEntityOpt.get());
	        System.out.println(status);

	        if ("cancelled".equalsIgnoreCase(status)) {
	            return new ResponseEntity<>("Registration is Cancelled by Admin", HttpStatus.FORBIDDEN);
	        } else if ("pending".equalsIgnoreCase(status)) {
	            return new ResponseEntity<>("User is Not Validated, Come back Later", HttpStatus.FORBIDDEN);
	        }
	        // If approved -> continue
	        logUser = userService.findByEmail(email);
		    if (logUser == null) {
		        return new ResponseEntity<>("User does not exist", HttpStatus.NOT_FOUND);
		    }

		    // TODO: Use password encoder if passwords are hashed
		    if (logUser.getPassword().equals(password)) {
		        return new ResponseEntity<>(logUser, HttpStatus.OK);
		    } else {
		        return new ResponseEntity<>("Incorrect Password, Try Again", HttpStatus.UNAUTHORIZED);
		    }
	    } else if ("nurse".equalsIgnoreCase(role)) {
	        Optional<NurseRegistrationEntity> nurseEntityOpt = nurseRegistrationService.findAllNurses()
	            .stream()
	            .filter(nur -> nur.getContactDetails().getEmail().equals(email))
	            .findFirst();

	        if (!nurseEntityOpt.isPresent()) {
	            return new ResponseEntity<>("Email Does not Exist, Try Again", HttpStatus.BAD_REQUEST);
	        }

	        String status = nurseEntityOpt.get().getRegistrationStatus();

	        if ("cancelled".equalsIgnoreCase(status)) {
	            return new ResponseEntity<>("Registration is Cancelled by Admin", HttpStatus.FORBIDDEN);
	        } else if ("pending".equalsIgnoreCase(status)) {
	            return new ResponseEntity<>("User is Not Validated, Come back Later", HttpStatus.FORBIDDEN);
	        }
	        // If approved -> continue
	        logUser = userService.findByEmail(email);
		    if (logUser == null) {
		        return new ResponseEntity<>("User does not exist", HttpStatus.NOT_FOUND);
		    }

		    // TODO: Use password encoder if passwords are hashed
		    if (logUser.getPassword().equals(password)) {
		        return new ResponseEntity<>(logUser, HttpStatus.OK);
		    } else {
		        return new ResponseEntity<>("Incorrect Password, Try Again", HttpStatus.UNAUTHORIZED);
		    }
	    }
	    else if ("admin".equalsIgnoreCase(role)) {
	        
	        // If approved -> continue
	        logUser = userService.findByEmail(email);
		    if (logUser == null) {
		        return new ResponseEntity<>("User does not exist", HttpStatus.NOT_FOUND);
		    }

		    // TODO: Use password encoder if passwords are hashed
		    if (logUser.getPassword().equals(password)) {
		        return new ResponseEntity<>(logUser, HttpStatus.OK);
		    } else {
		        return new ResponseEntity<>("Incorrect Password, Try Again", HttpStatus.UNAUTHORIZED);
		    }
	    }
	    
	    else {
	        return new ResponseEntity<>("Invalid role provided", HttpStatus.BAD_REQUEST);
	    }

	 
	   
	}


}
